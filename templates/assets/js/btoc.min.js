(()=>{var __webpack_modules__={"./src/js/btoc.js":()=>{eval("function Btoc(tocList, contentElement) {\n  this.tocList = tocList\n  this.elementList = getChild(contentElement, this.tocList)\n  // 当前解析到第几个标签\n  this.eIndex = 0\n\n  /**\n     * 递归读取目标标签中所有的符合要求的标签\n     * @param element\n     * @param tocList\n     * @returns {any[]|null}\n     */\n  function getChild(element, tocList) {\n    if (element == null) {\n      return null\n    }\n    // 获取所有子元素\n    var child = element.children\n    if (child.length === 0) {\n      return null\n    }\n    var childs = []\n    for (var i = 0; i < child.length; i++) {\n      var elem = child[i]\n      if (tocList.indexOf(elem.tagName) !== -1) {\n        childs.push(elem)\n      }\n      childs.push.apply(childs, getChild(elem, tocList))\n    }\n    return childs\n  }\n\n  /**\n     * 生成目录\n     */\n  this.build = function () {\n    if (this.elementList == null || this.elementList.length === 0) {\n      return ''\n    }\n    // 解析获取到的标签元素为目录\n    // 设置当前元素的最小度为-1表示当前元素为最外层目录元素，防止后续出现比当前元素序号更小的标签\n    return this.analysis(-1, this.tocList.indexOf(this.elementList[this.eIndex].tagName))\n  }\n\n  /**\n     * 解析目录\n     * @param last 最小的标签（即上级目录的标签）\n     * @param depth 当前标签\n     * @returns {string} 解析的目录内容\n     */\n  this.analysis = function (last, depth) {\n    var tocStr = '<ul class=\\'menu-list\\'>'\n    while (this.eIndex < this.elementList.length) {\n      var elem = this.elementList[this.eIndex]\n      // 取得当前元素在标签列表中所属的位置\n      var n = this.tocList.indexOf(elem.tagName)\n      // 当级别大于最大级别，小于当前级别时，就当做当前级别来处理，并将新的级别设置为新级别\n      if (n > last && n <= depth) {\n        depth = n\n        var id = elem.id\n        var text = elem.innerText\n        // 标签不存在id，设置id\n        if (id == null || id === '') {\n          id = text + '_' + this.eIndex\n          elem.setAttribute('id', id)\n        }\n        tocStr += `<li><a data-id=\"#${id}\"><i class=\"ri-attachment-2\"></i>${text}</a>`\n        this.eIndex++\n        if (this.eIndex >= this.elementList.length) {\n          tocStr += '</li>'\n          break\n        }\n        n = this.tocList.indexOf(this.elementList[this.eIndex].tagName)\n        // 如果下一个元素的序号大于当前元素的序号，那么元素为子元素，需要递归获取\n        if (n > depth) {\n          tocStr += this.analysis(depth, n)\n        }\n        tocStr += '</li>'\n      } else if (n <= last) {\n        // 如果这个元素的序号已经小于最小序号了，那说明这个元素已经外面一层的元素了\n        break\n      }\n    }\n    return tocStr + '</ul>'\n  }\n}\nconst observers = []\nfunction register($toc) {\n  // toc滚动时间和偏移量\n  const time = 20\n  const headingsOffset = 50\n  const currentInView = new Set()\n  const headingToMenu = new Map()\n  const $menus = Array.from($toc.querySelectorAll('.menu-list > li > a'))\n\n  for (const $menu of $menus) {\n    const elementId = $menu.getAttribute('data-id').trim().slice(1)\n    const $heading = document.getElementById(elementId)\n    if ($heading) {\n      headingToMenu.set($heading, $menu)\n    }\n  }\n\n  const $headings = Array.from(headingToMenu.keys())\n\n  const callback = (entries) => {\n    for (const entry of entries) {\n      if (entry.isIntersecting) {\n        currentInView.add(entry.target)\n      } else {\n        currentInView.delete(entry.target)\n      }\n    }\n    let $heading\n    if (currentInView.size) {\n      // heading is the first in-view heading\n      $heading = [...currentInView].sort(($el1, $el2) => $el1.offsetTop - $el2.offsetTop)[0]\n    } else if ($headings.length) {\n      // heading is the closest heading above the viewport top\n      $heading = $headings\n        .filter(($heading) => $heading.offsetTop < window.scrollY)\n        .sort(($el1, $el2) => $el2.offsetTop - $el1.offsetTop)[0]\n    }\n    if ($heading && headingToMenu.has($heading)) {\n      $menus.forEach(($menu) => $menu.classList.remove('is-active'))\n\n      const $menu = headingToMenu.get($heading)\n      $menu.classList.add('is-active')\n      let $menuList = $menu.parentElement.parentElement\n      while (\n        $menuList.classList.contains('menu-list') &&\n        $menuList.parentElement.tagName.toLowerCase() === 'li'\n      ) {\n        $menuList.parentElement.children[0].classList.add('is-active')\n        $menuList = $menuList.parentElement.parentElement\n      }\n    }\n  }\n  const observer = new IntersectionObserver(callback, { threshold: 0 })\n\n  for (const $heading of $headings) {\n    observer.observe($heading)\n    // smooth scroll to the heading\n    if (headingToMenu.has($heading)) {\n      const $menu = headingToMenu.get($heading)\n      $menu.addEventListener('click', () => {\n        var element = document.getElementById($menu.getAttribute('data-id').substring(1))\n        let rect = element.getBoundingClientRect()\n        let currentY = window.pageYOffset\n        let targetY = currentY + rect.top - headingsOffset\n        let speed = (targetY - currentY) / time\n        let offset = currentY > targetY ? -1 : 1\n        let requestId\n        function step(timestamp) {\n          currentY += speed\n          if (currentY * offset < targetY * offset) {\n            window.scrollTo(0, currentY)\n            requestId = window.requestAnimationFrame(step)\n          } else {\n            window.scrollTo(0, targetY)\n            window.cancelAnimationFrame(requestId)\n          }\n        }\n        window.requestAnimationFrame(step)\n      })\n    }\n    if (headingToMenu.has($heading)) {\n      $heading.style.scrollMargin = '1em'\n    }\n  }\n  observers.push(observer)\n}\nBtoc.init = function (params) {\n  const tocList = params['tocList']\n  const contentElement = params['contentElement']\n  const tocSelect = params['tocElement']\n  if (tocList == null || tocList.length === 0 || contentElement == null) {\n    $(tocSelect).children().remove()\n    return false\n  }\n  for (var i = 0; i < tocList.length; i++) {\n    tocList[i] = tocList[i].toUpperCase()\n  }\n  let tocContent = new Btoc(tocList, contentElement).build()\n  $(tocSelect).html(tocContent)\n}\n\nwindow.tocPjax = function () {\n  observers.forEach(observer => {\n    observer.disconnect()\n  })\n  observers.splice(0)\n  Btoc.init({\n    tocList: ['h1', 'h2', 'h3', 'h4', 'h5'],\n    contentElement: $('.main-content:not(.not-toc)')[0],\n    tocElement: '.toc-content'\n  })\n  if (typeof window.IntersectionObserver === 'undefined') {\n    return\n  }\n  document.querySelectorAll('.toc-content').forEach(register)\n}\n\n\n//# sourceURL=webpack://as-rust-blog-theme1.0/./src/js/btoc.js?")}},__webpack_exports__={};__webpack_modules__["./src/js/btoc.js"]()})();